/* Con em si tenemos por ejemplo, un <h1> y dentro <span>texto<span/>, lo que hace 
 * em es que es que agarra el valor del h1 y lo multiplica al span, si el h1 tiene 
 * un valor de 2 em, y al span le ponemos un valor de 2em igualmente, serían 4em 
 * en total, por ello es mejor usar rem. 

 * Además px no es tan recomendado... 
 * Rem es relativo al documento, por lo }1tanto no tiene el comportamiento extraño 
 * de em, ya que toma como referencia el tamaño del documento en vez de h1 

 **** Also, abajo usamos los valores en HTML y BODY para que 1 rem = 10px!
*/

:root {
  --blanco: #ffffff;
  --oscuro: #212121;
  --primario: rgb(253, 230, 148);
  --secundario: rgb(31, 28, 21);
  --terciario: rgb(164, 144, 72);
  --background: rgb(255, 248, 225);
  --gris: #757575;
}

/*
 * 
 * 
 * Globales
 * 
 */
html {
  font-size: 62.5%;
  box-sizing: border-box; /* hack para box model */
  /* scroll-snap-type: y mandatory; para que cuando yo scrollé, automaticamente salte a la siguiente seccion (y = vertical xd) */
}

/* Ya que asignamos "scroll-snap-type: y mandatory;" arriba
 * con este codigo de abajo, al hacer un solo scroll nos llevará
 * a la siguiente sección; en donde mandatory significa un
 * scroll = siguiente sección, mientras que "proximity" nece-
 * sitará de más esfuerzo/scroll para ir a la siguiente sección 
 * IMO: no me gusta asi que lo dejo sin eso xd

.servicios,
.navegacion-principal,
.formulario {
  scroll-snap-align: center;
  scroll-snap-stop: always;
}

*/

*,            /* hack para box model; selecciona todo */
*:before,     /* el after/before es un elemento que no existe, no se pueden seleccionar */
*:after       /* after lo coloca despues, before antes */ {
  box-sizing: inherit;
}

body {
  font-size: 16px;
  font-family: "Inter", sans-serif;
  background-image: linear-gradient(to top, var(--background) 0%, #fff 100%);
}

.contenedor {
  max-width: 120rem;
  /*
  margin-top: 0px;
  margin-right: auto;
  margin-bottom: 0px;
  margin-left: auto;
  
  margin equivale a los 4 valores de arriba, en ese mismo orden.
  ej: margin: valor_top valor_right valor_bottom valor_left;
  
  cuando tenemos repetidos: 0 auto 0 auto, se puede dejar como uno: 0 auto
  */
  margin: 0 auto;
}

.boton {
  background-color: var(--terciario);
  color: var(--blanco);
  padding: 1rem 3rem;
  margin-top: 1rem;
  font-size: 2rem;
  text-decoration: none;
  text-transform: uppercase;
  font-weight: bold;
  border-radius: 0.5rem;
  width: 90%;
  text-align: center;
  border: none;
  transition: 0.3s ease;
}
.boton:hover {
  cursor: pointer;
  scale: 1.05;
  background-color: var(--secundario);
}

/* para que el boton de arriba en dispositivos de >480px se ponga chico */
@media (min-width: 480px) {
  .boton {
    width: auto;
  }
}

.w-sm-100 {
  width: 100%;
}
@media (min-width: 768px) {
  .w-sm-100 {
    width: auto;
  }
}
.flex {
  display: flex;
}
.alinear-derecha {
  justify-content: flex-end;
}

.sombra {
  /* estas propiedades css tienen buen soporte- se puede ver en caniuse.com
  -webkit-box-shadow: 0px 6px 53px 1px rgba(153, 153, 153, 0.6);
  -moz-box-shadow: 0px 6px 53px 1px rgba(153, 153, 153, 0.6); */
  box-shadow: 0px 6px 53px 1px rgba(153, 153, 153, 0.6);
  background-color: #fff;
  padding: 2rem;
  border-radius: 2rem;
}

/*
 * 
 * 
 * Tipografía
 * 
 */

h1 {
  font-size: 3.8rem; /* 38px */
}

h2 {
  font-size: 2.8rem; /* 28px */
}

h3 {
  font-size: 1.8rem; /* 18px */
}

h1,
h2,
h3 {
  text-align: center;
}

/*
 * 
 * 
 * Titulos
 * 
 */

.titulo span {
  text-align: center;
  font-size: 2rem;
}

/*
 * 
 * 
 * Nav principal
 * 
 */

.nav-bg {
  background-color: var(--primario);
}

.navegacion-principal {
  display: flex;
  flex-direction: column;
}

/*
 * Tamaños que si bien no son un estándar, son como la media (+o-): 
 * 480px : móviles
 * 768px : tablets
 * 1140px: desktop/laptop
 * 1440px: pantallás aún más grandes
 */

@media (min-width: 480px) {
  .navegacion-principal {
    flex-direction: row;
    justify-content: space-between;
  }
}

.navegacion-principal a {
  display: block; /* para cuando el @media actúa, este centra los elementos */
  text-align: center; /* ligado a lo de arriba */
  color: var(--secundario);
  text-decoration: none;
  font-size: 2rem;
  font-weight: bold;
  padding: 1rem;
  transition: 0.18s ease;
}

.navegacion-principal a:hover {
  background-color: var(--terciario);
  color: var(--primario);
}

/*
 * 
 * 
 * Hero
 * 
 */

.hero {
  background-image: url("../img/disenoweb.jpg");
  background-repeat: no-repeat;
  background-size: cover;
  height: 450px;
  /* Al tener position:relative en el padre (hero) podemos usar el hijo (contenido-hero)
   * como un mapa. Es decir, se utilizará relativo para que al poner absoluto abajo
   * podamos ubicar ya sea arriba, derecha, abajo, izquierda, los elementos del hijo.
   */
  position: relative;
  margin-bottom: 4rem;
}

.contenido-hero {
  position: absolute;
  background-color: rgba(0, 0, 0, 0.7); /* Manera anterior (abajo la nueva) */
  background-color: rgb(0 0 0 / 70%); /* Donde 70% es alpha. Va de 0-100% */
  /* toma todo el espacio disponible */
  width: 100%;
  height: 100%;

  /* START: Alinear Horizontal y Vertical */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  /* END: Alinear Horizontal y Vertical */
}

.contenido-hero h2,
.contenido-hero p {
  color: var(--blanco);
}

.ubicacion {
  display: flex;
  align-items: flex-end;
}

/* div Servicios */
@media (min-width: 768px) {
  .servicios {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    column-gap: 1rem;
  }
}

.servicio {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.servicio h3 {
  color: var(--secundario);
  font-weight: 600;
}

.servicio p {
  line-height: 1.5;
}

.servicio .iconos {
  height: 15rem;
  width: 15rem;
  background-color: var(--primario);
  border-radius: 50%;
  display: flex;
  justify-content: space-evenly;
  align-items: center;
}

/* Contacto */
.formulario {
  background-color: var(--gris);
  width: min(60rem, 100%); /* Utilizar el valor más pequeño, util para no tener que utilizar media queries */
  margin: 0 auto;
  padding: 2rem;
  border-radius: 10px;
}

.formulario fieldset {
  border: none;
}

.formulario legend {
  text-align: center;
  font-size: 1.8rem;
  text-transform: uppercase;
  font-weight: 700;
  margin-bottom: 2rem;
  color: var(--blanco);
}

@media (min-width: 768px) {
  .contenedor-campos {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto 20rem;
    column-gap: 1rem;
  }

  /* nth-child(3) selecciona SOLAMENTE la tercera clase campo que exista.
   * De esta forma se evita crear una clase nueva */
  .campo:nth-child(3),
  .campo:nth-child(4) {
    grid-column: 1 / 3; /* usando firefox podemos activar las grids y mostrar el numero de lineas, en este caso quise extender el campo 3 desde la columna 1 a la 3   */
  }
}
.campo {
  margin-bottom: 1rem;
}

.campo label {
  color: var(--blanco);
  margin-bottom: 0.5rem;
  font-weight: 600;
  display: block;
}

.campo textarea {
  height: 15rem;
}

.input-text {
  width: 100%;
  border: none;
  padding: 1.5rem;
  border-radius: 0.5rem;
}

/* footer */
.footer {
  text-align: center;
}
