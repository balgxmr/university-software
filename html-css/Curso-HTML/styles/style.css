/* Con em si tenemos por ejemplo, un <h1> y dentro <span>texto<span/>, lo que hace 
 * em es que es que agarra el valor del h1 y lo multiplica al span, si el h1 tiene 
 * un valor de 2 em, y al span le ponemos un valor de 2em igualmente, serían 4em 
 * en total, por ello es mejor usar rem. 

 * Además px no es tan recomendado... 
 * Rem es relativo al documento, por lo }1tanto no tiene el comportamiento extraño 
 * de em, ya que toma como referencia el tamaño del documento en vez de h1 

 **** Also, abajo usamos los valores en HTML y BODY para que 1 rem = 10px!
*/

:root {
  --blanco: #ffffff;
  --oscuro: #212121;
  --primario: rgb(253, 230, 148);
  --secundario: rgb(31, 28, 21);
  --terciario: rgb(164, 144, 72);
  --background: rgb(255, 248, 225);
  --gris: #757575;
}

/*
 * 
 * 
 * Globales
 * 
 */
html {
  font-size: 62.5%;
  box-sizing: border-box; /* hack para box model */
}

*,            /* hack para box model; selecciona todo */
*:before,     /* el after/before es un elemento que no existe, no se pueden seleccionar */
*:after       /* after lo coloca despues, before antes */ {
  box-sizing: inherit;
}

body {
  font-size: 16px;
  font-family: "Inter", sans-serif;
  background-color: var(--background);
}

.contenedor {
  max-width: 120rem;
  /*
  margin-top: 0px;
  margin-right: auto;
  margin-bottom: 0px;
  margin-left: auto;
  
  margin equivale a los 4 valores de arriba, en ese mismo orden.
  ej: margin: valor_top valor_right valor_bottom valor_left;
  
  cuando tenemos repetidos: 0 auto 0 auto, se puede dejar como uno: 0 auto
  */
  margin: 0 auto;
}

.boton {
  background-color: var(--terciario);
  color: var(--blanco);
  padding: 1rem 3rem;
  margin-top: 1rem;
  font-size: 2rem;
  text-decoration: none;
  text-transform: uppercase;
  font-weight: bold;
  border-radius: 0.5rem;
  width: 90%;
  text-align: center;
}

/* para que el boton de arriba en dispositivos de >480px se ponga chico */
@media (min-width: 480px) {
  .boton {
    width: auto;
  }
}

/*
 * 
 * 
 * Tipografía
 * 
 */

h1 {
  font-size: 3.8rem; /* 38px */
}

h2 {
  font-size: 2.8rem; /* 28px */
}

h3 {
  font-size: 1.8rem; /* 18px */
}

h1,
h2,
h3 {
  text-align: center;
}

/*
 * 
 * 
 * Titulos
 * 
 */

.titulo span {
  text-align: center;
  font-size: 2rem;
}

/*
 * 
 * 
 * Nav principal
 * 
 */

.nav-bg {
  background-color: var(--primario);
}

.navegacion-principal {
  display: flex;
  flex-direction: column;
}

/*
 * Tamaños que si bien no son un estándar, son como la media (+o-): 
 * 480px : móviles
 * 768px : tablets
 * 1140px: desktop/laptop
 * 1440px: pantallás aún más grandes
 */

@media (min-width: 480px) {
  .navegacion-principal {
    flex-direction: row;
    justify-content: space-between;
  }
}

.navegacion-principal a {
  display: block; /* para cuando el @media actúa, este centra los elementos */
  text-align: center; /* ligado a lo de arriba */
  color: var(--secundario);
  text-decoration: none;
  font-size: 2rem;
  font-weight: bold;
  padding: 1rem;
}

.navegacion-principal a:hover {
  background-color: var(--terciario);
  color: var(--primario);
}

/*
 * 
 * 
 * Hero
 * 
 */

.hero {
  background-image: url("../img/disenoweb.jpg");
  background-repeat: no-repeat;
  background-size: cover;
  height: 450px;
  /* Al tener position:relative en el padre (hero) podemos usar el hijo (contenido-hero)
   * como un mapa. Es decir, se utilizará relativo para que al poner absoluto abajo
   * podamos ubicar ya sea arriba, derecha, abajo, izquierda, los elementos del hijo.
   */
  position: relative;
}

.contenido-hero {
  position: absolute;
  background-color: rgba(0, 0, 0, 0.7); /* Manera anterior (abajo la nueva) */
  background-color: rgb(0 0 0 / 70%); /* Donde 70% es alpha. Va de 0-100% */
  /* toma todo el espacio disponible */
  width: 100%;
  height: 100%;

  /* START: Alinear Horizontal y Vertical */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  /* END: Alinear Horizontal y Vertical */
}

.contenido-hero h2,
.contenido-hero p {
  color: var(--blanco);
}

.ubicacion {
  display: flex;
  align-items: flex-end;
}
